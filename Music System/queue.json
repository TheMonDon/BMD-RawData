{
  "name": "queue",
  "type": "action",
  "trigger": "slashCommand",
  "actions": [
    {
      "name": "Evaluate",
      "file": "eval.js",
      "data": {
        "name": "Evaluate",
        "transfer": true,
        "code": "(async () => {\n  await command.defer();\n  const moment = await client.getMods().require('moment');\n  await client.getMods().require('moment-duration-format');\n  const { useQueue } = await client.getMods().require('discord-player');\n\n  let page = bridge.variables.page;\n  page = parseInt(page, 10);\n  const queue = useQueue(command.guild.id);\n\n  if (!queue || queue.tracks.size < 1) return command.editOriginal({ content: 'There are no more songs in the queue.'});\n  if (!page) page = 1;\n  if (isNaN(page)) return command.editOriginal({ content: 'Please input a valid number.'});\n\n  let realPage = page;\n  let q = queue.tracks.map((track, index) => `**${index + 1}.** ${track.title}`);\n  const maxPages = Math.max(Math.ceil(q.length / 25), 1); // Ensure maxPages is at least 1\n\n  let temp = q.slice((page - 1) * 25, page * 25);\n\n  if (temp.length > 0) {\n    q = temp;\n  } else {\n    for (let i = 1; i <= page; i++) {\n      temp = q.slice((i - 1) * 25, i * 25);\n      if (temp.length < 1) {\n        realPage = Math.max(i - 1, 1); // Ensure realPage is at least 1\n        q = q.slice((realPage - 1) * 25, realPage * 25);\n        break;\n      }\n    }\n  }\n\n  const trackArray = queue.tracks.toArray();\n  const totalMilliseconds = trackArray.reduce((acc, track) => acc + (track.durationMS || 0), 0);\n\n  const timeLeft = moment\n    .duration(totalMilliseconds)\n    .format('y[ years][,] M[ Months][,] d[ days][,] h[ hours][,] m[ minutes][, and] s[ seconds]');\n\n  const embed = {\n    title: `${command.guild.name}'s Queue`,\n    description: q.join('\\n'),\n    color: 0x0099cc,\n    author: {\n      name: command.user.tag,\n      vicon_url: command.user.avatarURL(),\n    },\n    fields: [\n      {\n        name: 'Estimated Time Remaining',\n        value: timeLeft,\n        inline: true,\n      },\n    ],\n    timestamp: new Date(Date.now()).toISOString(),\n    footer: {\n      text: `Page ${realPage} / ${maxPages}`,\n    },\n  };\n\n  command.editOriginal({ embeds: [embed] }).catch((error) => {\n    console.log(error);\n    command.editOriginal({\n      content: `There was an error while displaying the queue! ${error.message}`,\n    });\n  });\n})();\n",
        "result": {
          "type": "temporary",
          "value": ""
        },
        "type": {
          "type": "temporary",
          "value": ""
        }
      },
      "id": 1737400934016
    }
  ],
  "customId": 1737400261567,
  "boundary": {
    "worksIn": "guild",
    "limits": []
  },
  "parameters": [
    {
      "name": "page",
      "type": "string",
      "description": "The page to view",
      "required": false,
      "choices": [],
      "storeAs": "page",
      "completion": false
    }
  ],
  "description": "Shows the current songs in the queue",
  "folder": [],
  "color": "rgb(0, 153, 204)"
}
